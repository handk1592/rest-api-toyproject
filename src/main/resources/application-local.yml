spring:
  sdb:
    datasource:
      url: jdbc:h2:tcp://localhost/C:/Users/ejrrb/Desktop/Tools/h2database/datajpa
      username: sa
      password:
      driver-class-name: org.h2.Driver

      # maximum-pool-size
      #  - Mysql 공식 레퍼런스 확인시 600여명 유저 대응시 15~20개 커넥션 풀 충분
      #  - 너무 많은 커네션 할당 DB 자원 낭비, 너무 적으면 DeadLock 발생 원인
      #  - HikariCP DeadLock 피하기 위한 공식: Tn * (Cm - 1) + 1 -> Tn: max thread 수, Cm: 하나의 Task에 필요한 connection 수
      #  - SpringBoot 내장 tomcat thread max 설정에 따라 조정 필요, 별도 설정 없을시 default 200
      #  - JPA 사용시 하나의 Task에 두개의 transaction 생성하는 경우가 발생하여 connection 2개 소비 -> 하나의 예로 @GeneratedValue(strategy = GenerationType.AUTO) 어노테이션 사용시 connection 2개 사용
      #  - 결론 -> maximumpoolsize= tomcat max thread * (JPA max connection -1) + 1  --> 200 * (2-1) + 1 = 400
      hikari:
        pool-name: HikeriPool
        maximum-pool-size: 400
        max-lifetime: 28770000 # MySQL wati_timeout 시간보다 2~3초 짧게 권장 -> Mysql 설정 확인후 설정 조정 예정이며 -30s 설정 예정
        data-source-properties: # Mysql best practice 설정
          cachePrepStmts: true
          prepStmtCacheSize: 250
          prepStmtCacheSqlLimit: 2048
          useServerPrepStmts: true

  jpa:
    hibernate:
      ddl-auto: create  # 애플리케이션 로딩시 Drop -> Create
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect # JPA DB Vendor 방언 설정
        format_sql: true

logging:
  level:
    root: info
    org.springframework.web: debug
    org.hibernate: debug  # hibernate 전반적인 설정 확인
    org.hibernate.SQL: debug
    com.rest.edu: debug
    com.zaxxer.hikari: debug # hikariCP 전반적인 설정 확인